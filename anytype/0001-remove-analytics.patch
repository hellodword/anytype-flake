From d6b5868d0777360359335759314ced95b1607d74 Mon Sep 17 00:00:00 2001
From: squalus <squalus@squalus.net>
Date: Thu, 28 Dec 2023 14:46:09 -0800
Subject: [PATCH] remove analytics

---
 electron/hook/afterpack.js   | 21 ++-------------------
 src/ts/app.tsx               | 18 ------------------
 src/ts/lib/analytics.ts      | 29 +++--------------------------
 src/ts/lib/api/dispatcher.ts |  2 --
 src/ts/lib/util/data.ts      |  2 --
 5 files changed, 5 insertions(+), 67 deletions(-)

diff --git a/electron/hook/afterpack.js b/electron/hook/afterpack.js
index 3e7625592..b1b303f9b 100644
--- a/electron/hook/afterpack.js
+++ b/electron/hook/afterpack.js
@@ -1,21 +1,4 @@
-const SentryCli = require('@sentry/cli');
-const cli = new SentryCli();
-
 exports.default = async function (context) {
-	if (process.env.ELECTRON_SKIP_SENTRY) {
-		return;
-	};
-
-	cli.releases.options = {
-		url: 'https://sentry.anytype.io',
-		authToken: process.env.SENTRY_AUTH_TOKEN,
-		logLevel: 'debug',
-		org: 'anytype',
-		project: 'desktop',
-		silent: false,
-	};
+	return;
+};
 
-	return await cli.releases.uploadSourceMaps(context.packager.appInfo.version, { 
-		include: [ '../../dist/main.js.map' ],
-	});
-};
\ No newline at end of file
diff --git a/src/ts/app.tsx b/src/ts/app.tsx
index 0463ce399..d287aa8e0 100644
--- a/src/ts/app.tsx
+++ b/src/ts/app.tsx
@@ -1,6 +1,5 @@
 import * as React from 'react';
 import * as hs from 'history';
-import * as Sentry from '@sentry/browser';
 import $ from 'jquery';
 import raf from 'raf';
 import { RouteComponentProps } from 'react-router';
@@ -128,23 +127,6 @@ enableLogging({
 });
 */
 
-Sentry.init({
-	release: window.Electron.version.app,
-	environment: window.Electron.isPackaged ? 'production' : 'development',
-	dsn: Constant.sentry,
-	maxBreadcrumbs: 0,
-	beforeSend: (e: any) => {
-		e.request.url = '';
-		return e;
-	},
-	integrations: [
-		new Sentry.Integrations.GlobalHandlers({
-			onerror: true,
-			onunhandledrejection: true,
-		}),
-	],
-});
-
 class RoutePage extends React.Component<RouteComponentProps> {
 	render () {
 		return (
diff --git a/src/ts/lib/analytics.ts b/src/ts/lib/analytics.ts
index 60960b91e..aec59815e 100644
--- a/src/ts/lib/analytics.ts
+++ b/src/ts/lib/analytics.ts
@@ -1,4 +1,3 @@
-import * as amplitude from 'amplitude-js';
 import { I, C, UtilCommon, Storage } from 'Lib';
 import { commonStore, dbStore } from 'Store';
 import Constant from 'json/constant.json';
@@ -12,7 +11,7 @@ const KEYS = [
 ];
 const KEY_CONTEXT = 'analyticsContext';
 const KEY_ORIGINAL_ID = 'analyticsOriginalId';
-const URL = 'amplitude.anytype.io';
+const URL = '127.0.0.1';
 
 class Analytics {
 	
@@ -24,8 +23,7 @@ class Analytics {
 	};
 
 	isAllowed (): boolean {
-		const { config } = commonStore;
-		return !(config.sudo || [ 'alpha', 'beta' ].includes(config.channel) || !window.Electron.isPackaged) || this.debug();
+		return false;
 	};
 	
 	init () {
@@ -49,27 +47,6 @@ class Analytics {
 
 		C.MetricsSetParameters(platform, version.join('-'));
 
-		this.instance = amplitude.getInstance();
-		this.instance.init(Constant.amplitude, null, {
-			apiEndpoint: URL,
-			batchEvents: true,
-			saveEvents: true,
-			includeUtm: true,
-			includeReferrer: true,
-			platform,
-			trackingOptions: {
-    			ipAddress: false,
-			},
-		});
-
-		this.instance.setVersionName(window.Electron.version.app);
-		this.instance.setUserProperties({ 
-			deviceType: 'Desktop',
-			platform,
-			osVersion: window.Electron.version.os,
-			interfaceLang,
-		});
-
 		this.removeContext();
 		this.log('[Analytics].init');
 	};
@@ -504,4 +481,4 @@ class Analytics {
 
 };
 
- export const analytics: Analytics = new Analytics();
\ No newline at end of file
+ export const analytics: Analytics = new Analytics();
diff --git a/src/ts/lib/api/dispatcher.ts b/src/ts/lib/api/dispatcher.ts
index bf46e27cc..767d2a4b6 100644
--- a/src/ts/lib/api/dispatcher.ts
+++ b/src/ts/lib/api/dispatcher.ts
@@ -1,4 +1,3 @@
-import * as Sentry from '@sentry/browser';
 import arrayMove from 'array-move';
 import { observable, set } from 'mobx';
 import Commands from 'protobuf/pb/protos/commands_pb';
@@ -1186,7 +1185,6 @@ class Dispatcher {
 					console.error('Error', type, 'code:', message.error.code, 'description:', message.error.description);
 
 					if (!SKIP_SENTRY_ERRORS.includes(type)) {
-						Sentry.captureMessage(`${type}: code: ${code} msg: ${message.error.description}`);
 						analytics.event('Exception', { method: type, code: message.error.code });
 					};
 
diff --git a/src/ts/lib/util/data.ts b/src/ts/lib/util/data.ts
index a79fec4d7..a4a732a92 100644
--- a/src/ts/lib/util/data.ts
+++ b/src/ts/lib/util/data.ts
@@ -1,7 +1,6 @@
 import { I, C, keyboard, translate, UtilCommon, UtilRouter, Storage, analytics, dispatcher, Mark, UtilObject, focus } from 'Lib';
 import { commonStore, blockStore, detailStore, dbStore, authStore, notificationStore } from 'Store';
 import Constant from 'json/constant.json';
-import * as Sentry from '@sentry/browser';
 
 type SearchSubscribeParams = Partial<{
 	subId: string;
@@ -213,7 +212,6 @@ class UtilData {
 
 		analytics.profile(info.analyticsId, info.networkId);
 
-		Sentry.setUser({ id: info.analyticsId });
 	};
 	
 	onAuth (param?: any, callBack?: () => void) {
-- 
2.42.0

